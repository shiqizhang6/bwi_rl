#include <learning/WekaParser.h>
#include <learning/DecisionTree.h>
#include <learning/ArffReader.h>
#include <fstream>
#include <string>
#include <iostream>

void readArffHeader(std::ifstream &in, std::vector<std::string> &featureNames, std::vector<bool> &numeric);
void addDataToTree(boost::shared_ptr<DecisionTree> dt, ArffReader &arff);

int main(int argc, const char *argv[]) {
  // handle the command line arguments
  std::string usage = "Usage: wekaAddWeights wekaFile arffFile\n  wekaFile is a tree generated by weka\n  arffFile is a file containing the training data in weka's format";
  if (argc != 3) {
    std::cout << usage << std::endl;
    return 1;
  }
  std::string wekaFile = argv[1];
  std::string arffFile = argv[2];
  
  // read in the original tree
  WekaParser parser(wekaFile,5,false);
  boost::shared_ptr<DecisionTree> dt = parser.makeDecisionTree();
  std::cerr << "Parsed original tree" << std::endl;

  // open the arffFile and set up some variables
  ArffReader arff(arffFile);
  std::cerr << "Parsed arff header" << std::endl;
  
  // read in the header
  // add data to tree
  addDataToTree(dt,arff);
  std::cerr << "Added data to tree" << std::endl;

  //dt->randomizeUnseenLeaves();
  //std::cerr << "Randomized unseen leaves" << std::endl;
  
  dt->generalizeUnseenLeaves();
  std::cerr << "Generalized unseen leaves" << std::endl;
  
  std::cout << dt->root;
  
  return 0;
}

void readArffHeader(std::ifstream &in, std::vector<std::string> &featureNames, std::vector<bool> &numeric) {
  std::string str;
  std::string start = "@attribute ";
  int startInd;
  int endInd;

  // read until the attributes
  while (true) {
    std::getline(in,str);
    if (str.compare(0,start.size(),start) != 0)
      continue;
    break;
  }
  // read in the attributes
  while (true) {
    if (str.compare(0,start.size(),start) != 0)
      break;

    startInd = str.find(" ",start.size()-1);
    endInd = str.find(" ",startInd+1);
    featureNames.push_back(str.substr(startInd+1,endInd-startInd-1));
    numeric.push_back(str.substr(endInd+1) == "numeric");
    std::getline(in,str);
  }
  // read until the data
  while (str != "@data")
    std::getline(in,str);
}

void addDataToTree(boost::shared_ptr<DecisionTree> dt, ArffReader &arff) {
  Features features;
  Classification c;
  int count = 0;
  std::string classFeature = arff.getClassFeature();
  while (!arff.isDone()) {
    count++;
    if (count % 10000 == 0)
      std::cerr << count << std::endl;
    
    arff.next(features);
    unsigned int trueClass = (int)(features[classFeature] + 0.5);
    dt->classify(features,c,true,trueClass,features[WEIGHT_FEATURE]);
  }
}
