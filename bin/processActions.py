#!/usr/bin/env python

import sys, os, csv

#handTypes = ['Greedy','TA','GP','PD']
handTypes = []

def flatten(arr):
  return sum(arr,[])

def moveToDirection(move):
  move = tuple(map(int,move))
  if move == (1,0):
    return 'R'
  elif move == (-1,0):
    return 'L'
  elif move == (0,1):
    return 'U'
  elif move == (0,-1):
    return 'D'
  elif move == (0,0):
    return 'S'
  else:
    print >>sys.stderr,'Invalid move:',move

def getXY(args):
  x = int(args[0])
  y = int(args[1])
  return x,y,args[2:]

def getDestFilename(args):
  destFilename = args[0]
  _,ext = os.path.splitext(destFilename)
  if ext != '.arff':
    print >>sys.stderr,'Invalid destination file:',destFilename
    print >>sys.stderr,'Expected a .arff file'
    sys.exit(1)
  return destFilename,args[1:]

def getStudentFiles(args):
  files = args
  for f in files:
    _,ext = os.path.splitext(f)
    if ext != '.csv':
      print >>sys.stderr,'Invalid file:',f
      sys.exit(1)
  return files,[]

def readLinesFromFile(filename):
  lines = []
  with open(filename,'r') as f:
    reader = csv.DictReader(f)
    for line in reader:
      lines.append(line)
  return lines

def filterActionsToDirections(lines):
  keys = lines[0].keys()
  keysToFilter = []
  for key in keys:
    if 'DX' in key:
      ykey = key.replace('DX','DY')
      dirkey = key.replace('DX','')
      keysToFilter.append((key,ykey,dirkey))
  for line in lines:
    for xkey,ykey,dirkey in keysToFilter:
      move = (line[xkey],line[ykey])
      del line[xkey]
      del line[ykey]
      line[dirkey] = moveToDirection(move)

def getFields():
  n = 'numeric'
  d = '{L,R,U,D,S}'

  fields = [('Prey.x',n),('Prey.y',n)]
  fields += flatten([[('Pred%i.x'%(i+1),n),('Pred%i.y'%(i+1),n)] for i in range(4)])
  fields += [('Next2Prey',n)]
  fields += [('DeltaXToPrey',n),('DeltaYToPrey',n)]
  fields += [('Occupied%s' % direction,n) for direction in ['L','R','U','D']]
  #fields += [('%s.des'%x,d) for x in handTypes]
  # last for class
  fields += [('Pred.act',d)]
  return fields

def calculateDiff(start,end,world):
  diff = end - start
  if diff > world * 0.5:
    diff -= world
  if diff < world * -0.5:
    diff += world
  return diff

def readPos(line,key):
  return map(int,[line['%s.x' % key],line['%s.y' % key]])

def movePosition(pos,move,worldX,worldY):
  res = [pos[0] + move[0],pos[1] + move[1]]
  if res[0] > worldX:
    res[0] -= worldX
  elif res[0] < 0:
    res[0] += worldX
  
  if res[1] > worldY:
    res[1] -= worldY
  elif res[1] < 0:
    res[1] += worldY
  return res

def assignPredInfoToLine(predNum,line,worldX,worldY):
  for x in handTypes:
    line['%s.des'%x] = line['%s%i.des' % (x,predNum)]
  line['Pred.act'] = line['Pred%i.act'%predNum]
  #line['Pred.des'] = line['Pred%i.des'%predNum]
  prey = readPos(line,'Prey')
  me = readPos(line,'Pred%i'%predNum)
  dist = abs(me[0] - prey[0]) + abs(me[1] - prey[1])
  if dist == 1:
    line['Next2Prey'] = '1'
  else:
    line['Next2Prey'] = '0'
  line['DeltaXToPrey'] = calculateDiff(me[0],prey[0],worldX)
  line['DeltaYToPrey'] = calculateDiff(me[1],prey[1],worldY)
  agents = [prey] + [readPos(line,'Pred%i'%(i+1)) for i in range(4)]
  for move in [(-1,0),(1,0),(0,1),(0,-1)]:
    res = movePosition(me,move,worldX,worldY)
    direction = moveToDirection(move)
    occupied = 1 if res in agents else 0
    line['Occupied%s' % direction] = occupied


def writeLinesToWeka(lines,destFilename,worldX,worldY):
  fields = getFields()
  fieldnames = [x[0] for x in fields]

  with open(destFilename,'w') as f:
    writeHeader(fields,f,worldX,worldY)
    f.write('@data\n')
    for line in lines:
      for predNum in range(4):
        assignPredInfoToLine(predNum+1,line,worldX,worldY)
        for name in fieldnames:
          f.write('%s,' % line[name])
        f.write('\n')

def writeHeader(fields,f,worldX,worldY):
  f.write('@relation \'Generated by processActions.py for a %ix%i world\'\n' % (worldX,worldY))
  f.write('\n')
  for fieldname,fieldtype in fields:
    f.write('@attribute %s %s\n' % (fieldname,fieldtype))
  f.write('\n')

def main(destFilename,studentFiles,worldX,worldY):
  lines = []
  for studentFile in studentFiles:
    lines.extend(readLinesFromFile(studentFiles[0]))
  filterActionsToDirections(lines)
  writeLinesToWeka(lines,destFilename,worldX,worldY)

if __name__ == '__main__':
  if len(sys.argv) < 5:
    print >>sys.stderr,'Not enough arguments'
    print >>sys.stderr,'Usage: processActions.py worldX worldY destARFFFilename student1CSV [student2CSV ...]'
    sys.exit(1)
  args = sys.argv[1:]
  worldX,worldY,args = getXY(args)
  destFilename,args = getDestFilename(args)
  studentFiles,args = getStudentFiles(args)
  main(destFilename,studentFiles,worldX,worldY)
